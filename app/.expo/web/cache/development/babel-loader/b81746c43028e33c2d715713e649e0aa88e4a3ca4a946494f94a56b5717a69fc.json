{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TopBar from \"./TopBar\";\nimport NavBar from \"./NavBar\";\nimport styles from \"../scripts/style\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar TopicBody = function TopicBody(_ref) {\n  var navigation = _ref.navigation,\n    route = _ref.route;\n  var currentLanguage = route.params.currentLanguage;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    showNewTopic = _useState2[0],\n    setShowNewTopic = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    topics = _useState4[0],\n    setTopics = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    topicInput = _useState6[0],\n    setTopicInput = _useState6[1];\n  useEffect(function () {\n    var storedTopics = localStorage.getItem(currentLanguage + 'topics');\n    if (storedTopics) {\n      setTopics(JSON.parse(storedTopics));\n    }\n  }, []);\n  var saveTopic = function saveTopic(topic) {\n    if (!topics.includes(topic)) {\n      var updatedTopics = [].concat(_toConsumableArray(topics), [topic]);\n      localStorage.setItem(currentLanguage + 'topics', JSON.stringify(updatedTopics));\n      setTopics(updatedTopics);\n    }\n    setTopicInput('');\n  };\n  var renderView = function renderView() {\n    if (showNewTopic) {\n      return newTopic();\n    } else {\n      return defaultTopicPage();\n    }\n  };\n  var TopicButton = function TopicButton(_ref2) {\n    var topic = _ref2.topic;\n    return _jsx(Pressable, {\n      style: bodyStyles.addButton,\n      children: _jsxs(Text, {\n        children: [\" \", topic, \" \"]\n      })\n    });\n  };\n  var defaultTopicPage = function defaultTopicPage() {\n    return _jsxs(View, {\n      style: {\n        flex: 1\n      },\n      children: [_jsx(TopBar, {\n        navigation: navigation\n      }), _jsxs(ScrollView, {\n        style: styles.body,\n        children: [_jsx(Text, {\n          children: \" Welcome! \"\n        }), topics.map(function (topic) {\n          return _jsx(TopicButton, {\n            topic: topic\n          });\n        }), _jsx(Pressable, {\n          style: bodyStyles.addButton,\n          onPress: function onPress() {\n            return setShowNewTopic(true);\n          },\n          children: _jsx(Text, {\n            children: \" + Add Topic\"\n          })\n        })]\n      }), _jsx(NavBar, {\n        navigation: navigation\n      })]\n    });\n  };\n  var newTopic = function newTopic() {\n    return _jsxs(View, {\n      style: {\n        flex: 1\n      },\n      children: [_jsx(TopBar, {\n        navigation: navigation\n      }), _jsxs(View, {\n        style: styles.body,\n        children: [_jsx(TextInput, {\n          value: topicInput,\n          onChangeText: setTopicInput,\n          placeholder: \"Enter topic\"\n        }), _jsx(Pressable, {\n          onPress: function onPress() {\n            saveTopic(topicInput);\n            setShowNewTopic(false);\n          },\n          children: _jsx(Text, {\n            children: \" Save \"\n          })\n        }), _jsx(Pressable, {\n          children: _jsx(Text, {\n            children: \" Cancel \"\n          })\n        })]\n      })]\n    });\n  };\n  return renderView();\n};\nvar bodyStyles = StyleSheet.create({\n  addButton: {\n    alignSelf: 'center'\n  }\n});\nexport default TopicBody;","map":{"version":3,"names":["React","useEffect","useState","View","StyleSheet","Text","Pressable","ScrollView","TextInput","TopBar","NavBar","styles","jsxs","_jsxs","jsx","_jsx","TopicBody","_ref","navigation","route","currentLanguage","params","_useState","_useState2","_slicedToArray","showNewTopic","setShowNewTopic","_useState3","_useState4","topics","setTopics","_useState5","_useState6","topicInput","setTopicInput","storedTopics","localStorage","getItem","JSON","parse","saveTopic","topic","includes","updatedTopics","concat","_toConsumableArray","setItem","stringify","renderView","newTopic","defaultTopicPage","TopicButton","_ref2","style","bodyStyles","addButton","children","flex","body","map","onPress","value","onChangeText","placeholder","create","alignSelf"],"sources":["/home/CustomComponents/TopicBody.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {View, StyleSheet, Text, Pressable, ScrollView, TextInput} from \"react-native\";\r\nimport TopBar from \"./TopBar\";\r\nimport NavBar from \"./NavBar\";\r\nimport styles from \"../scripts/style\"\r\n\r\nconst TopicBody = ({navigation, route}) => {\r\n    const { currentLanguage } = route.params;\r\n    const [showNewTopic, setShowNewTopic] = useState(false);\r\n    const [topics, setTopics] = useState([]);\r\n    const [topicInput, setTopicInput] = useState('');\r\n\r\n    useEffect(() => {\r\n        const storedTopics = localStorage.getItem(currentLanguage + 'topics');\r\n        if (storedTopics) {\r\n            setTopics(JSON.parse(storedTopics));\r\n        }\r\n    }, []);\r\n    const saveTopic = (topic) => {\r\n        if (!topics.includes(topic)) {\r\n            const updatedTopics = [...topics, topic];\r\n            localStorage.setItem(currentLanguage + 'topics', JSON.stringify(updatedTopics));\r\n            setTopics(updatedTopics);\r\n        }\r\n        setTopicInput('');\r\n    }\r\n\r\n    const renderView = () => {\r\n        if (showNewTopic) {\r\n            return newTopic();\r\n        } else {\r\n            return defaultTopicPage();\r\n        }\r\n    };\r\n\r\n    const TopicButton = ({ topic }) => {\r\n        return(\r\n            <Pressable style={bodyStyles.addButton}>\r\n                <Text> {topic} </Text>\r\n            </Pressable>\r\n        )\r\n    }\r\n\r\n    const defaultTopicPage = () => {\r\n        return (\r\n            <View style={{ flex: 1 }}>\r\n                <TopBar navigation={navigation}/>\r\n                <ScrollView style={styles.body}>\r\n                    <Text> Welcome! </Text>\r\n                    {topics.map((topic) => (\r\n                        <TopicButton topic={topic} />\r\n                    ))}\r\n                    <Pressable\r\n                        style={bodyStyles.addButton}\r\n                        onPress={() => setShowNewTopic(true)}\r\n                    >\r\n                        <Text> + Add Topic</Text>\r\n                    </Pressable>\r\n                </ScrollView>\r\n                <NavBar navigation={navigation}/>\r\n            </View>\r\n        );\r\n    }\r\n\r\n    const newTopic = () => {\r\n        return (\r\n            <View style={{flex: 1}}>\r\n                <TopBar navigation={navigation}/>\r\n                <View style={styles.body}>\r\n                    <TextInput\r\n                        value={topicInput}\r\n                        onChangeText={setTopicInput}\r\n                        placeholder=\"Enter topic\"\r\n                    />\r\n                    <Pressable onPress={() => {\r\n                        saveTopic(topicInput);\r\n                        setShowNewTopic(false)\r\n                    }}>\r\n                        <Text> Save </Text>\r\n                    </Pressable>\r\n                    <Pressable>\r\n                        <Text> Cancel </Text>\r\n                    </Pressable>\r\n                </View>\r\n            </View>\r\n        );\r\n    }\r\n\r\n    return renderView();\r\n}\r\n\r\nconst bodyStyles = StyleSheet.create({\r\n    addButton: {\r\n        alignSelf: 'center'\r\n    }\r\n})\r\n\r\nexport default TopicBody;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}