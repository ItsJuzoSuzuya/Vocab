{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TopBar from \"./TopBar\";\nimport NavBar from \"./NavBar\";\nimport styles from \"../scripts/style\";\nimport { saveLanguageToDB } from \"../scripts/api\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar LanguageBody = function LanguageBody(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    showNewLanguage = _useState2[0],\n    setShowNewLanguage = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    languages = _useState4[0],\n    setLanguages = _useState4[1];\n  useEffect(function () {\n    var storedLanguages = localStorage.getItem('languages');\n    if (storedLanguages) {\n      setLanguages(JSON.parse(storedLanguages));\n    }\n  }, []);\n  var saveLanguage = function saveLanguage(language) {\n    saveLanguageToDB(language);\n    if (!languages.includes(language)) {\n      var updatedLanguages = [].concat(_toConsumableArray(languages), [language]);\n      localStorage.setItem('languages', JSON.stringify(updatedLanguages));\n    }\n  };\n  var renderView = function renderView() {\n    if (showNewLanguage) {\n      return newLanguage();\n    } else {\n      return defaultLanguagePage();\n    }\n  };\n  var LanguageButton = function LanguageButton(_ref2) {\n    var language = _ref2.language;\n    var navigateToTopicPage = function navigateToTopicPage() {\n      navigation.navigate('TopicPage', {\n        currentLanguage: language\n      });\n    };\n    return _jsx(Pressable, {\n      style: bodyStyles.addButton,\n      onPress: navigateToTopicPage,\n      children: _jsxs(Text, {\n        children: [\" \", language, \" \"]\n      })\n    });\n  };\n  var defaultLanguagePage = function defaultLanguagePage() {\n    return _jsxs(View, {\n      style: {\n        flex: 1\n      },\n      children: [_jsx(TopBar, {\n        navigation: navigation\n      }), _jsxs(ScrollView, {\n        style: styles.body,\n        children: [_jsx(Text, {\n          children: \" Welcome! \"\n        }), languages.map(function (language) {\n          return _jsx(LanguageButton, {\n            language: language\n          });\n        }), _jsx(Pressable, {\n          style: bodyStyles.addButton,\n          onPress: function onPress() {\n            return setShowNewLanguage(true);\n          },\n          children: _jsx(Text, {\n            children: \" + Add Language\"\n          })\n        })]\n      }), _jsx(NavBar, {\n        navigation: navigation\n      })]\n    });\n  };\n  var newLanguage = function newLanguage() {\n    return _jsxs(View, {\n      style: {\n        flex: 1\n      },\n      children: [_jsx(TopBar, {\n        navigation: navigation\n      }), _jsxs(View, {\n        style: styles.body,\n        children: [_jsx(Pressable, {\n          style: bodyStyles.addButton,\n          onPress: function onPress() {\n            saveLanguage('German');\n            setShowNewLanguage(false);\n          },\n          children: _jsx(Text, {\n            children: \" German \"\n          })\n        }), _jsx(Pressable, {\n          style: bodyStyles.addButton,\n          onPress: function onPress() {\n            saveLanguage('English');\n            setShowNewLanguage(false);\n          },\n          children: _jsx(Text, {\n            children: \" English \"\n          })\n        })]\n      })]\n    });\n  };\n  return renderView();\n};\nvar bodyStyles = StyleSheet.create({\n  addButton: {\n    alignSelf: 'center'\n  }\n});\nexport default LanguageBody;","map":{"version":3,"names":["React","useEffect","useState","View","StyleSheet","Text","Pressable","ScrollView","TopBar","NavBar","styles","saveLanguageToDB","jsxs","_jsxs","jsx","_jsx","LanguageBody","_ref","navigation","_useState","_useState2","_slicedToArray","showNewLanguage","setShowNewLanguage","_useState3","_useState4","languages","setLanguages","storedLanguages","localStorage","getItem","JSON","parse","saveLanguage","language","includes","updatedLanguages","concat","_toConsumableArray","setItem","stringify","renderView","newLanguage","defaultLanguagePage","LanguageButton","_ref2","navigateToTopicPage","navigate","currentLanguage","style","bodyStyles","addButton","onPress","children","flex","body","map","create","alignSelf"],"sources":["/opt/react_native_app/CustomComponents/LanguageBody.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {View, StyleSheet, Text, Pressable, ScrollView} from \"react-native\";\r\nimport TopBar from \"./TopBar\";\r\nimport NavBar from \"./NavBar\";\r\nimport styles from \"../scripts/style\"\r\nimport { saveLanguageToDB } from \"../scripts/api\"\r\n\r\nconst LanguageBody = ({navigation}) => {\r\n    const [showNewLanguage, setShowNewLanguage] = useState(false);\r\n    const [languages, setLanguages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const storedLanguages = localStorage.getItem('languages');\r\n        if (storedLanguages) {\r\n            setLanguages(JSON.parse(storedLanguages));\r\n        }\r\n    }, []);\r\n    const saveLanguage = (language) => {\r\n        saveLanguageToDB(language);\r\n        if (!languages.includes(language)) {\r\n            const updatedLanguages = [...languages, language];\r\n            localStorage.setItem('languages', JSON.stringify(updatedLanguages));\r\n\r\n            //setLanguages(updatedLanguages);\r\n        }\r\n\r\n    }\r\n\r\n    const renderView = () => {\r\n        if (showNewLanguage) {\r\n            return newLanguage();\r\n        } else {\r\n            return defaultLanguagePage();\r\n        }\r\n    };\r\n\r\n    const LanguageButton = ({language}) => {\r\n        const navigateToTopicPage = () => {\r\n            navigation.navigate('TopicPage', { currentLanguage: language });\r\n        };\r\n\r\n        return(\r\n            <Pressable style={bodyStyles.addButton} onPress={navigateToTopicPage}>\r\n                <Text> {language} </Text>\r\n            </Pressable>\r\n        )\r\n    }\r\n\r\n    const defaultLanguagePage = () => {\r\n        return (\r\n            <View style={{flex: 1}}>\r\n                <TopBar navigation={navigation}/>\r\n                <ScrollView style={styles.body}>\r\n                    <Text> Welcome! </Text>\r\n                    {languages.map((language) => (\r\n                        <LanguageButton language={language} />\r\n                    ))}\r\n                    <Pressable\r\n                        style={bodyStyles.addButton}\r\n                        onPress={() => setShowNewLanguage(true)}\r\n                    >\r\n                        <Text> + Add Language</Text>\r\n                    </Pressable>\r\n                </ScrollView>\r\n                <NavBar navigation={navigation}/>\r\n            </View>\r\n        );\r\n    }\r\n\r\n    const newLanguage = () => {\r\n        return (\r\n            <View style={{flex: 1}}>\r\n                <TopBar navigation={navigation}/>\r\n                <View style={styles.body}>\r\n                    <Pressable\r\n                        style={bodyStyles.addButton}\r\n                        onPress={() => {saveLanguage('German'); setShowNewLanguage(false)}}\r\n                    >\r\n                        <Text> German </Text>\r\n                    </Pressable>\r\n                    <Pressable\r\n                        style={bodyStyles.addButton}\r\n                        onPress={() => {saveLanguage('English'); setShowNewLanguage(false)}}\r\n                    >\r\n                        <Text> English </Text>\r\n                    </Pressable>\r\n                </View>\r\n            </View>\r\n        );\r\n    }\r\n\r\n    return renderView();\r\n}\r\n\r\nconst bodyStyles = StyleSheet.create({\r\n    addButton: {\r\n        alignSelf: 'center'\r\n    }\r\n})\r\n\r\nexport default LanguageBody;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}